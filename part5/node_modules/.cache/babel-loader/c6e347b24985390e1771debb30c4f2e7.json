{"ast":null,"code":"var _jsxFileName = \"/home/rasmusniemi/full-stack-mooc-2020/part5/src/components/Blog.js\";\nimport React from 'react';\nimport blogService from '../services/blogs';\n\nconst Blog = _ref => {\n  let {\n    blog,\n    notificationCallback,\n    setBlogs,\n    blogs\n  } = _ref;\n  const handleLike = useCallback(async (event, id) => {\n    const likedBlog = blogs.find(blog => blog.id === id);\n\n    if (!likedBlog) {\n      notificationCallback(\"expetion: \" + \"blog not found\");\n    }\n\n    const blogToUpdate = { ...likedBlog,\n      likes: likedBlog.likes + 1,\n      user: likedBlog.user.id\n    };\n\n    try {\n      const returnedBlog = await blogsService.update(id, updatedBlog);\n      setBlogs(blogs.map(blog => blog.id !== id ? blog : returnedBlog));\n    } catch (error) {\n      handleApiErrors(error, id);\n    } finally {\n      setIsLoading(false);\n    }\n  }); // const handleLike = async () => {\n  //   try {\n  //     const updatedContents = { author : blog.author, url : blog.url, user : blog.user.id, likes : blog.likes + 1 }\n  //     const response = await blogService.updateBlog({ id : blog.id, updatedContents })\n  //     let blogList = blogs.map(b => b.id !== updatedContents.id ? b : updatedContents);\n  //     setBlogs(blogList);\n  //     if (response.error) {\n  //       notificationCallback\n  //       (\"response-error \" + response.error)\n  //       setTimeout(() => {\n  //         notificationCallback(null)\n  //       }, 5000)\n  //     } else {\n  //       notificationCallback(`Liked ${blog.title} by ${blog.author}!` )\n  //       setTimeout(() => {\n  //         notificationCallback(null)\n  //       }, 5000)\n  //     }\n  //   } catch (exception) {\n  //     notificationCallback(\"expetion: \" + exception.message )\n  //     setTimeout(() => {\n  //       notificationCallback(null)\n  //     }, 5000)\n  //   }\n  //   // window.location.reload();\n  // }\n\n  const deleteBlog = async () => {\n    if (window.confirm(`Remove blog ${blog.title} by ${blog.author}?`)) {\n      const response = await blogService.deleteBlog({\n        id: blog.id\n      });\n\n      if (response.error) {\n        notificationCallback(\"response-error \" + response.error);\n      } else {\n        notificationCallback(`Deleted ${blog.title}`);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 3\n    }\n  }, blog.title, \" \", blog.author, \" \", blog.url, \" \", blog.likes, \" \", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleLike,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 56\n    }\n  }, \"Like\"), \" \", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: deleteBlog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 99\n    }\n  }, \"Delete\"));\n};\n\nexport default Blog;","map":{"version":3,"sources":["/home/rasmusniemi/full-stack-mooc-2020/part5/src/components/Blog.js"],"names":["React","blogService","Blog","blog","notificationCallback","setBlogs","blogs","handleLike","useCallback","event","id","likedBlog","find","blogToUpdate","likes","user","returnedBlog","blogsService","update","updatedBlog","map","error","handleApiErrors","setIsLoading","deleteBlog","window","confirm","title","author","response","url"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;;AAEA,MAAMC,IAAI,GAAG,QAAmD;AAAA,MAAlD;AAACC,IAAAA,IAAD;AAAOC,IAAAA,oBAAP;AAA6BC,IAAAA,QAA7B;AAAuCC,IAAAA;AAAvC,GAAkD;AAG9D,QAAMC,UAAU,GAAGC,WAAW,CAC5B,OAAOC,KAAP,EAAcC,EAAd,KAAqB;AACnB,UAAMC,SAAS,GAAGL,KAAK,CAACM,IAAN,CAAYT,IAAD,IAAUA,IAAI,CAACO,EAAL,KAAYA,EAAjC,CAAlB;;AACA,QAAI,CAACC,SAAL,EAAgB;AACdP,MAAAA,oBAAoB,CAAC,eAAe,gBAAhB,CAApB;AACD;;AACD,UAAMS,YAAY,GAAG,EACnB,GAAGF,SADgB;AAEnBG,MAAAA,KAAK,EAAEH,SAAS,CAACG,KAAV,GAAkB,CAFN;AAGnBC,MAAAA,IAAI,EAAEJ,SAAS,CAACI,IAAV,CAAeL;AAHF,KAArB;;AAMA,QAAI;AACF,YAAMM,YAAY,GAAG,MAAMC,YAAY,CAACC,MAAb,CAAoBR,EAApB,EAAwBS,WAAxB,CAA3B;AACAd,MAAAA,QAAQ,CAACC,KAAK,CAACc,GAAN,CAAWjB,IAAD,IAAWA,IAAI,CAACO,EAAL,KAAYA,EAAZ,GAAiBP,IAAjB,GAAwBa,YAA7C,CAAD,CAAR;AACD,KAHD,CAGE,OAAOK,KAAP,EAAc;AACdC,MAAAA,eAAe,CAACD,KAAD,EAAQX,EAAR,CAAf;AACD,KALD,SAKU;AACRa,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GApB2B,CAA9B,CAH8D,CAyB9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMC,UAAU,GAAG,YAAY;AAC7B,QAAIC,MAAM,CAACC,OAAP,CAAgB,eAAcvB,IAAI,CAACwB,KAAM,OAAMxB,IAAI,CAACyB,MAAO,GAA3D,CAAJ,EAAoE;AAClE,YAAMC,QAAQ,GAAG,MAAM5B,WAAW,CAACuB,UAAZ,CAAuB;AAAEd,QAAAA,EAAE,EAAGP,IAAI,CAACO;AAAZ,OAAvB,CAAvB;;AACA,UAAImB,QAAQ,CAACR,KAAb,EAAoB;AAClBjB,QAAAA,oBAAoB,CAAC,oBAAoByB,QAAQ,CAACR,KAA9B,CAApB;AACD,OAFD,MAEO;AACLjB,QAAAA,oBAAoB,CAAE,WAAUD,IAAI,CAACwB,KAAM,EAAvB,CAApB;AACD;AACF;AACF,GATD;;AAWA,sBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGxB,IAAI,CAACwB,KADR,OACgBxB,IAAI,CAACyB,MADrB,OAC8BzB,IAAI,CAAC2B,GADnC,OACyC3B,IAAI,CAACW,KAD9C,oBACqD;AAAQ,IAAA,OAAO,EAAEP,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADrD,oBACgG;AAAQ,IAAA,OAAO,EAAEiB,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADhG,CADA;AAKD,CApED;;AAsEA,eAAetB,IAAf","sourcesContent":["import React from 'react'\nimport blogService from '../services/blogs'\n\nconst Blog = ({blog, notificationCallback, setBlogs, blogs}) => {\n  \n\n  const handleLike = useCallback(\n    async (event, id) => {\n      const likedBlog = blogs.find((blog) => blog.id === id)\n      if (!likedBlog) {\n        notificationCallback(\"expetion: \" + \"blog not found\");\n      }\n      const blogToUpdate = {\n        ...likedBlog,\n        likes: likedBlog.likes + 1,\n        user: likedBlog.user.id,\n      }\n      \n      try {\n        const returnedBlog = await blogsService.update(id, updatedBlog);\n        setBlogs(blogs.map((blog) => (blog.id !== id ? blog : returnedBlog)));\n      } catch (error) {\n        handleApiErrors(error, id);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n      )\n  // const handleLike = async () => {\n  //   try {\n  //     const updatedContents = { author : blog.author, url : blog.url, user : blog.user.id, likes : blog.likes + 1 }\n  //     const response = await blogService.updateBlog({ id : blog.id, updatedContents })\n  //     let blogList = blogs.map(b => b.id !== updatedContents.id ? b : updatedContents);\n  //     setBlogs(blogList);\n  //     if (response.error) {\n  //       notificationCallback\n  //       (\"response-error \" + response.error)\n  //       setTimeout(() => {\n  //         notificationCallback(null)\n  //       }, 5000)\n  //     } else {\n  //       notificationCallback(`Liked ${blog.title} by ${blog.author}!` )\n  //       setTimeout(() => {\n  //         notificationCallback(null)\n  //       }, 5000)\n  //     }\n  //   } catch (exception) {\n  //     notificationCallback(\"expetion: \" + exception.message )\n  //     setTimeout(() => {\n  //       notificationCallback(null)\n  //     }, 5000)\n  //   }\n  //   // window.location.reload();\n  // }\n\n  const deleteBlog = async () => {\n    if (window.confirm(`Remove blog ${blog.title} by ${blog.author}?`)) {\n      const response = await blogService.deleteBlog({ id : blog.id })\n      if (response.error) {\n        notificationCallback(\"response-error \" + response.error)\n      } else {\n        notificationCallback(`Deleted ${blog.title}`)\n      }\n    }\n  }\n\n  return (\n  <div>\n    {blog.title} {blog.author} {blog.url} {blog.likes} <button onClick={handleLike}>Like</button> <button onClick={deleteBlog}>Delete</button>\n  </div>  \n  )\n}\n\nexport default Blog"]},"metadata":{},"sourceType":"module"}