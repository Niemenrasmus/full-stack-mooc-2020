{"ast":null,"code":"var _jsxFileName = \"/home/rasmusniemi/full-stack-mooc-2020/part5/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Blog from './components/Blog';\nimport Notification from \"./components/Notification\";\nimport blogService from './services/blogs';\nimport loginService from './services/login';\nimport LoginForm from \"./components/LoginForm\";\nimport BlogForm from \"./components/BlogForm\";\nimport Togglable from './components/Togglable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [user, setUser] = useState(null);\n  const [notificationMessage, setNotificationMessage] = useState(null); // const [title, setTitle] = useState('')\n  // const [author, setAuthor] = useState('') \n  // const [url, setUrl] = useState('') \n\n  const [blogs, setBlogs] = useState([]);\n  const addBlogRef = /*#__PURE__*/React.createRef();\n  useEffect(() => {\n    blogService.getAll().then(blogs => setBlogs(blogs.sort((a, b) => a.likes > b.likes ? -1 : 1)));\n  }, []);\n  useEffect(() => {\n    const loggedInUserJSON = window.localStorage.getItem('loggedUser');\n\n    if (loggedInUserJSON) {\n      const user = JSON.parse(loggedInUserJSON);\n      setUser(user);\n      blogService.setToken(user.token);\n    }\n  }, []);\n\n  const handleLogin = async event => {\n    event.preventDefault();\n\n    try {\n      const user = await loginService({\n        username,\n        password\n      });\n      console.log(user.id, \"user.id\");\n      window.localStorage.setItem('loggedUser', JSON.stringify(user));\n      blogService.setToken(user.token);\n      setUser(user);\n      setUsername('');\n      setPassword('');\n      setNotificationMessage(user.username + ' logged in');\n      setTimeout(() => {\n        setNotificationMessage(null);\n      }, 5000);\n    } catch (exception) {\n      console.log(exception);\n      setNotificationMessage('wrong credentials');\n      setTimeout(() => {\n        setNotificationMessage(null);\n      }, 5000);\n    }\n  };\n\n  const handleLogout = async () => {\n    window.localStorage.clear();\n    setUser(null);\n  };\n\n  const createBlog = async blogObject => {\n    addBlogRef.current.toggleVisibility();\n    await blogService.create(blogObject);\n    setNotificationMessage(`New blog: ${blogObject.title} ${blogObject.author} created`);\n    blogService.getAll().then(blogs => setBlogs(blogs));\n  };\n\n  const blogAddForm = () => {\n    return /*#__PURE__*/_jsxDEV(Togglable, {\n      buttonText: \"Add Blog\",\n      ref: addBlogRef,\n      children: /*#__PURE__*/_jsxDEV(BlogForm // handleBlogChange = {handleBlogChange}\n      , {\n        createBlog: createBlog,\n        setNotificationMessage: setNotificationMessage // title = {title}  \n        // author = {author}\n        // url = {url}\n        // setTitle = {setTitle} \n        // setAuthor = {setAuthor}\n        // setUrl = {setUrl}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }, this);\n  };\n\n  const likeBlog = async (id, blogObject) => {\n    try {\n      console.log(id, \"id in delete blog 1\");\n      const response = await blogService.updateBlog(id, blogObject);\n      console.log(response);\n      console.log(id, \"id in delete blog 2\");\n      const updatedBlog = { ...blogObject,\n        id\n      };\n      setBlogs(blogs.map(blog => blog.id !== id ? blog : updatedBlog));\n    } catch (err) {\n      console.error(err);\n      setNotificationMessage({\n        err\n      });\n      setTimeout(() => {\n        setNotificationMessage(null);\n      }, 5000);\n    }\n  };\n\n  const deleteBlog = async id => {\n    try {\n      const blog = blogs.filter(blog => blog.id === id);\n\n      if (window.confirm(`Remove ${blog[0].title} by ${blog[0].author}`)) {\n        // delete blog from db\n        const response = await blogService.deleteBlog(id);\n        console.log(response); // update state to reflect deletion in UI\n\n        setBlogs(blogs.filter(blog => blog.id !== id));\n      }\n    } catch (err) {\n      console.error(err);\n      setNotificationMessage({\n        err\n      });\n      setTimeout(() => {\n        setNotificationMessage(null);\n      }, 5000);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Welcome to blog app\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {\n      message: notificationMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this), user === null ? /*#__PURE__*/_jsxDEV(LoginForm, {\n      handleSubmit: handleLogin,\n      username: username,\n      password: password,\n      setUsername: setUsername,\n      setPassword: setPassword\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleLogout,\n          children: \" Log Out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"blogs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this), blogAddForm(), blogs.sort((a, b) => b.likes - a.likes).map(blog => /*#__PURE__*/_jsxDEV(Blog, {\n        user: user,\n        blog: blog,\n        likeBlog: likeBlog,\n        deleteBlog: deleteBlog\n      }, blog.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }, this) // <Blog \n      // key={blog.id}\n      // user = { user } \n      // blog={blog}\n      // notificationCallback = {setNotificationMessage} \n      // blogs = {blogs}\n      // setBlogs = {setBlogs}\n      // />\n      )]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 7\n  }, this);\n};\n\n_s(App, \"Nf/sVNe1FtD+CIVYjB3GtUk2wQQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/rasmusniemi/full-stack-mooc-2020/part5/src/App.js"],"names":["React","useState","useEffect","Blog","Notification","blogService","loginService","LoginForm","BlogForm","Togglable","App","username","setUsername","password","setPassword","user","setUser","notificationMessage","setNotificationMessage","blogs","setBlogs","addBlogRef","createRef","getAll","then","sort","a","b","likes","loggedInUserJSON","window","localStorage","getItem","JSON","parse","setToken","token","handleLogin","event","preventDefault","console","log","id","setItem","stringify","setTimeout","exception","handleLogout","clear","createBlog","blogObject","current","toggleVisibility","create","title","author","blogAddForm","likeBlog","response","updateBlog","updatedBlog","map","blog","err","error","deleteBlog","filter","confirm"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from 'react'\nimport Blog from './components/Blog'\nimport Notification from \"./components/Notification\"\nimport blogService from './services/blogs'\nimport loginService from './services/login'\nimport LoginForm from \"./components/LoginForm\"\nimport BlogForm from \"./components/BlogForm\"\n\nimport Togglable from './components/Togglable'\n\n\nconst App = () => {\n  const [username, setUsername] = useState('') \n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null) \n  const [notificationMessage, setNotificationMessage] = useState(null);\n\n  // const [title, setTitle] = useState('')\n  // const [author, setAuthor] = useState('') \n  // const [url, setUrl] = useState('') \n  \n  const [blogs, setBlogs] = useState([])\n\n  const addBlogRef = React.createRef();\n\n  useEffect(() => {\n    blogService.getAll().then(blogs =>\n      setBlogs(blogs.sort((a,b) => a.likes > b.likes ? -1 : 1))\n    )  \n  }, [])\n\n  useEffect(() => {\n    const loggedInUserJSON = window.localStorage.getItem('loggedUser');\n    if (loggedInUserJSON) {\n      const user = JSON.parse(loggedInUserJSON);\n      setUser(user);\n      blogService.setToken(user.token);\n    }\n  }, []);\n  \n  const handleLogin = async (event) => {\n    event.preventDefault();\n    \n    try {\n      const user = await loginService({\n        username, password\n      });\n      console.log(user.id, \"user.id\")\n      window.localStorage.setItem('loggedUser', JSON.stringify(user));\n      blogService.setToken(user.token)\n      setUser(user)\n      setUsername('')\n      setPassword('')\n      setNotificationMessage(user.username + ' logged in')\n      setTimeout(() => {\n        setNotificationMessage(null)\n      }, 5000)\n    } catch (exception) {\n      console.log(exception)\n      setNotificationMessage('wrong credentials')\n      setTimeout(() => {\n        setNotificationMessage(null)\n      }, 5000)\n    }\n  }\n  \n\n  const handleLogout = async () => {\n    window.localStorage.clear()\n    setUser(null);\n  }\n\n  const createBlog = async (blogObject) => {\n    addBlogRef.current.toggleVisibility()\n    await blogService\n    .create(blogObject)\n      setNotificationMessage(`New blog: ${blogObject.title} ${blogObject.author} created`)\n      blogService.getAll().then((blogs) => setBlogs(blogs))\n  }\n\n  const blogAddForm  = () => {\n    return (\n    <Togglable buttonText='Add Blog' ref={addBlogRef} >\n      <BlogForm\n        // handleBlogChange = {handleBlogChange}\n        createBlog= {createBlog}\n        setNotificationMessage = {setNotificationMessage}\n        // title = {title}  \n        // author = {author}\n        // url = {url}\n        // setTitle = {setTitle} \n        // setAuthor = {setAuthor}\n        // setUrl = {setUrl}\n        />\n      </Togglable> \n    )  \n}\n\n  const likeBlog = async (id, blogObject) => {\n    \n    try {  \n      \n      console.log(id, \"id in delete blog 1\")\n      const response =  await blogService.updateBlog(id, blogObject)\n     \n      console.log(response)\n      console.log(id, \"id in delete blog 2\")\n      \n      const updatedBlog = {\n        ...blogObject,\n        id,\n      }\n\n      setBlogs(blogs.map((blog) => (blog.id !== id ? blog : updatedBlog)))\n      \n    } catch (err) {\n      console.error(err)\n      setNotificationMessage({err})\n\n      setTimeout(() => {\n        setNotificationMessage(null)\n      }, 5000)\n    }\n  }\n\n  const deleteBlog = async (id) => {\n    try {\n      const blog = blogs.filter((blog) => blog.id === id)\n\n      if (window.confirm(`Remove ${blog[0].title} by ${blog[0].author}`)) {\n        // delete blog from db\n        const response = await blogService.deleteBlog(id)\n        \n        console.log(response)\n        // update state to reflect deletion in UI\n        setBlogs(blogs.filter((blog) => blog.id !== id))\n      }\n    } catch (err) {\n      console.error(err)\n      setNotificationMessage({err})\n      setTimeout(() => {\n        setNotificationMessage(null)\n      }, 5000)\n    }\n  }\n\n\n    return (\n      <div>\n        <h2>Welcome to blog app</h2>\n        <Notification message={notificationMessage} />\n        {user === null\n          ? <LoginForm\n            handleSubmit={handleLogin}\n            username={username}\n            password={password}\n            setUsername={setUsername}\n            setPassword={setPassword}\n          />\n          : <div>\n          <p>\n          <button onClick={handleLogout}> Log Out</button> \n          </p>\n          <h2>blogs</h2>\n          {blogAddForm()}\n          { blogs\n            .sort((a, b) => b.likes - a.likes)\n            .map((blog) => (\n            <Blog  \n            key={blog.id}\n            user={user}\n            blog={blog}\n            likeBlog={likeBlog}\n            deleteBlog={deleteBlog}\n            />\n            // <Blog \n            // key={blog.id}\n            // user = { user } \n            // blog={blog}\n            // notificationCallback = {setNotificationMessage} \n            // blogs = {blogs}\n            // setBlogs = {setBlogs}\n            // />\n          ))}\n          </div>}        \n         </div>\n    )\n  }\n\nexport default App"]},"metadata":{},"sourceType":"module"}